<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:Gemini.Modules.ToolBars.Controls"
                    xmlns:shaderEffects="clr-namespace:Gemini.Framework.ShaderEffects"
                    xmlns:converters="clr-namespace:Gemini.Framework.ShaderEffects.Converters"
                    xmlns:controls="clr-namespace:Gemini.Framework.Controls">
    <converters:BindingProxy x:Key="DefaultBackground" Data="{DynamicResource ToolbarDefaultBackground}"/>
    <converters:SolidColorBrushToColorConverter x:Key="SolidColorBrushToColorConverter"/>
    
    <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Cursor" Value="SizeAll" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent" SnapsToDevicePixels="True">
                        <Grid>
                            <Rectangle x:Name="DragHandleGeometryPlaceholder"
                                       Fill="{DynamicResource ToolbarDefaultGrip}"
                                       Visibility="Collapsed" />
                            <Rectangle Margin="0,3,0,4" Width="5">
                                <Rectangle.Fill>
                                    <DrawingBrush TileMode="Tile"
                                              Viewbox="0,0,5,4"
                                              ViewboxUnits="Absolute"
                                              Viewport="0,0,5,4"
                                              ViewportUnits="Absolute">
                                        <DrawingBrush.Drawing>
                                            <GeometryDrawing Brush="{Binding Fill, ElementName=DragHandleGeometryPlaceholder, Mode=OneWay}">
                                                <GeometryDrawing.Geometry>
                                                    <GeometryGroup>
                                                        <GeometryGroup.Children>
                                                            <RectangleGeometry Rect="0,0,1,1" />
                                                            <RectangleGeometry Rect="4,0,1,1" />
                                                            <RectangleGeometry Rect="2,2,1,1" />
                                                        </GeometryGroup.Children>
                                                    </GeometryGroup>
                                                </GeometryDrawing.Geometry>
                                            </GeometryDrawing>
                                        </DrawingBrush.Drawing>
                                    </DrawingBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="Separator">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <StackPanel Orientation="Horizontal" Margin="2,0">
                        <Rectangle Width="1" Fill="{DynamicResource ToolbarDefaultSeparator}" />
                        <Rectangle Width="1" Fill="{DynamicResource ToolbarDefaultSeparatorAccent}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBarButtonStyleBase" TargetType="{x:Type ButtonBase}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonDefaultText}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="Border" BorderThickness="1">
                        <ContentPresenter x:Name="Content" Margin="2"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          RecognizesAccessKey="True">
                            <ContentPresenter.Effect>
                                <shaderEffects:ThemedImageEffect Background="{Binding Converter={StaticResource SolidColorBrushToColorConverter}, Mode=OneWay,
                                                                                      Source={StaticResource DefaultBackground}, Path=Data}"
                                                                 IsEnabled="{Binding Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Path=IsEnabled}"/>
                            </ContentPresenter.Effect>
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Hovered -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ToolbarButtonHoveredBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ToolbarButtonHoveredBorder}" />
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource ToolbarButtonHoveredText}" />
                        </MultiTrigger>

                        <!-- Pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ToolbarButtonPressedBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ToolbarButtonPressedBorder}" />
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource ToolbarButtonPressedText}" />
                        </MultiTrigger>

                        <!-- Disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <!--<Setter TargetName="Content" Property="Effect">
                                <Setter.Value>
                                    <shaderEffects:GrayscaleEffect />
                                </Setter.Value>
                            </Setter>-->
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource ToolbarButtonDisabledText}" />
                            <Setter TargetName="Content" Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBarToggleButtonStyleBase" TargetType="{x:Type ToggleButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonDefaultText}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border" BorderThickness="1">
                        <ContentPresenter x:Name="Content" Margin="2"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          RecognizesAccessKey="True">
                            <ContentPresenter.Effect>
                                <shaderEffects:ThemedImageEffect Background="{Binding Converter={StaticResource SolidColorBrushToColorConverter}, Mode=OneWay,
                                                                                      Source={StaticResource DefaultBackground}, Path=Data}"
                                                                 IsEnabled="{Binding Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Path=IsEnabled}"/>
                            </ContentPresenter.Effect>
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Hovered -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ToolbarButtonHoveredBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ToolbarButtonHoveredBorder}" />
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource ToolbarButtonHoveredText}" />
                        </MultiTrigger>
                        
                        <!-- Pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ToolbarButtonPressedBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ToolbarButtonPressedBorder}" />
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource ToolbarButtonPressedText}" />
                        </MultiTrigger>

                        <!-- Checked -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ToolbarButtonCheckedBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ToolbarButtonCheckedBorder}" />
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource ToolbarButtonCheckedText}" />
                        </MultiTrigger>

                        <!-- Checked Hovered -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ToolbarButtonCheckedHoveredBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ToolbarButtonCheckedHoveredBorder}" />
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource ToolbarButtonCheckedHoveredText}" />
                        </MultiTrigger>
                        
                        <!-- Disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <!--<Setter TargetName="Content" Property="Effect">
                                <Setter.Value>
                                    <shaderEffects:GrayscaleEffect />
                                </Setter.Value>
                            </Setter>-->
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource ToolbarButtonDisabledText}" />
                            <Setter TargetName="Content" Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" BasedOn="{StaticResource ToolBarButtonStyleBase}" TargetType="{x:Type Button}" />
    <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" BasedOn="{StaticResource ToolBarToggleButtonStyleBase}" TargetType="{x:Type ToggleButton}" />
    <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" BasedOn="{StaticResource ToolBarToggleButtonStyleBase}" TargetType="{x:Type CheckBox}" />
    <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" BasedOn="{StaticResource ToolBarToggleButtonStyleBase}" TargetType="{x:Type RadioButton}" />

    <Style x:Key="ToolBarOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Name="Bd" 
                            Background="{DynamicResource ToolbarOverflowButtonDefaultBackground}" 
                            SnapsToDevicePixels="true">
                        <Grid>
                            <StackPanel Orientation="Horizontal" Margin="2,3" VerticalAlignment="Top">
                                <Path Name="OverflowArrow1" 
                                      Fill="{DynamicResource ToolbarOverflowButtonDefaultGlyph}" 
                                      Data="M 0 0 L 0 4 L 2 2 Z"
                                      Margin="0 0 2 0"/>
                                <Path Name="OverflowArrow2" 
                                      Fill="{DynamicResource ToolbarOverflowButtonDefaultGlyph}" 
                                      Data="M 0 0 L 0 4 L 2 2 Z" />                            
                            </StackPanel>
                            <StackPanel Orientation="Vertical" Margin="2,3" VerticalAlignment="Bottom" Visibility="Collapsed">
                                <Path Name="CustomiseLine" 
                                      Stroke="{DynamicResource ToolbarOverflowButtonDefaultGlyph}" 
                                      StrokeThickness="1"
                                      Data="M 0 0.5 L 5 0.5" />
                                <Path Name="CustomiseArrow" 
                                      Fill="{DynamicResource ToolbarOverflowButtonDefaultGlyph}" 
                                      Data="M 0 2 L 5 2 L 2.5 5 Z" />
                            </StackPanel>
                            
                            <ContentPresenter />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ToolbarOverflowButtonHoveredBackground}" />
                            <Setter TargetName="OverflowArrow1" Property="Fill" Value="{DynamicResource ToolbarOverflowButtonHoveredGlyph}" />
                            <Setter TargetName="OverflowArrow2" Property="Fill" Value="{DynamicResource ToolbarOverflowButtonHoveredGlyph}" />
                            <Setter TargetName="CustomiseLine" Property="Stroke" Value="{DynamicResource ToolbarOverflowButtonHoveredGlyph}" />
                            <Setter TargetName="CustomiseArrow" Property="Fill" Value="{DynamicResource ToolbarOverflowButtonHoveredGlyph}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ToolbarOverflowButtonPressedBackground}" />
                            <Setter TargetName="OverflowArrow1" Property="Fill" Value="{DynamicResource ToolbarOverflowButtonPressedGlyph}" />
                            <Setter TargetName="OverflowArrow2" Property="Fill" Value="{DynamicResource ToolbarOverflowButtonPressedGlyph}" />
                            <Setter TargetName="CustomiseLine" Property="Stroke" Value="{DynamicResource ToolbarOverflowButtonPressedGlyph}" />
                            <Setter TargetName="CustomiseArrow" Property="Fill" Value="{DynamicResource ToolbarOverflowButtonPressedGlyph}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ToolbarOverflowButtonPressedBackground}" />
                            <Setter TargetName="OverflowArrow1" Property="Fill" Value="{DynamicResource ToolbarOverflowButtonPressedGlyph}" />
                            <Setter TargetName="OverflowArrow2" Property="Fill" Value="{DynamicResource ToolbarOverflowButtonPressedGlyph}" />
                            <Setter TargetName="CustomiseLine" Property="Stroke" Value="{DynamicResource ToolbarOverflowButtonPressedGlyph}" />
                            <Setter TargetName="CustomiseArrow" Property="Fill" Value="{DynamicResource ToolbarOverflowButtonPressedGlyph}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToolBar.OverflowMode" Value="AsNeeded" />
                                <Condition Property="IsEnabled" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OverflowArrow1" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="OverflowArrow2" Property="Visibility" Value="Hidden" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="OverflowArrow1" Property="Fill" Value="#AAA" />
                            <Setter TargetName="OverflowArrow2" Property="Fill" Value="#AAA" />
                            <Setter TargetName="CustomiseLine" Property="Stroke" Value="#AAA" />
                            <Setter TargetName="CustomiseArrow" Property="Fill" Value="#AAA" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style the toolbar-->
    <Style x:Key="{x:Type ToolBar}" TargetType="{x:Type ToolBar}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{DynamicResource ToolbarDefaultBackground}"
                            BorderBrush="{DynamicResource ToolbarDefaultBorder}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <Thumb x:Name="ToolBarThumb" Grid.Column="0" Style="{StaticResource ToolBarThumbStyle}" Width="10" />

                            <Border Grid.Column="1" Padding="{TemplateBinding Padding}">
                                <Grid>
                                    <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" />
                                </Grid>
                            </Border>

                            <ToggleButton x:Name="OverflowButton" Grid.Column="2" IsEnabled="{TemplateBinding HasOverflowItems}"
                                          Style="{StaticResource ToolBarOverflowButtonStyle}"
                                          IsChecked="{Binding Path=IsOverflowOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                          ClickMode="Press">
                                <Popup x:Name="OverflowPopup" AllowsTransparency="true" Placement="Bottom"
                                       IsOpen="{Binding Path=IsOverflowOpen,RelativeSource={RelativeSource TemplatedParent}}" StaysOpen="false"
                                       Focusable="false" PopupAnimation="Slide">
                                    <Border x:Name="DropDownBorder" 
                                            Background="{DynamicResource MenuTopLevelHeaderPressedBackground}" BorderThickness="1"
                                            BorderBrush="{DynamicResource MenuTopLevelHeaderPressedBorder}">
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Margin="2"
                                                              WrapWidth="200" Focusable="true" FocusVisualStyle="{x:Null}" 
                                                              KeyboardNavigation.TabNavigation="Cycle"
                                                              KeyboardNavigation.DirectionalNavigation="Cycle" />
                                    </Border>
                                </Popup>
                            </ToggleButton>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="false" />
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToolBar.OverflowMode" Value="AsNeeded" />
                                <Condition Property="HasOverflowItems" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OverflowButton" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                        <Trigger Property="ToolBar.OverflowMode" Value="Never">
                            <Setter TargetName="OverflowButton" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style the tool pane toolbar-->
    <Style x:Key="{x:Type c:ToolPaneToolBar}" TargetType="{x:Type c:ToolPaneToolBar}" BasedOn="{StaticResource {x:Type ToolBar}}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="4 2" />
    </Style>

    <!-- Style the toolbar tray -->
    <Style x:Key="{x:Type ToolBarTray}" TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <!-- Style the toolbar tray container -->
    <Style x:Key="{x:Type c:ToolBarTrayContainer}" TargetType="{x:Type c:ToolBarTrayContainer}">
        <Setter Property="Background" Value="{DynamicResource ToolbarDefaultTray}" />
        <Setter Property="Padding" Value="8 0 8 1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="c:ToolBarTrayContainer">
                    <Border Background="{TemplateBinding Background}" 
                            Padding="{TemplateBinding Padding}"
                            Margin="{TemplateBinding Margin}">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>